%\VignetteIndexEntry{Main vignette:Gene set enrichment and network analysis of high-throughput RNAi screen data using HTSanalyzeR}
%\VignetteKeywords{Gene Set Enrichment and Network Analysis of RNAi screens}
%\VignettePackage{HTSanalyzeR}

\documentclass{article}
\usepackage{Sweave,fullpage}


\title{Gene set enrichment and network analysis of high-throughput RNAi screen data using \emph{HTSanalyzeR}}
\author{John Rose, Camille Terfve, and Florian Markowetz}

\begin{document}
\maketitle


\tableofcontents

\section{Introduction}

The package \emph{HTSanalyzeR} facilitates integrated high-level analysis of RNAi high-throughput screening (HTS) data. There are various packages (e.g. \emph{cellHTS2}, \emph{RNAither}) for normalization, summarization, and annotation of RNAi HTS raw data, but, to date, there is little support for higher-level analyses of such data. This package adapts a number of methods used for high-level microarray analysis for application to RNA HTS data. In particular, this package allows for efficient gene set enrichment and network analyses. Gene set enrichment analysis is performed using both hypergeometric testing and the Gene Set Enrichment Analysis approach reported by Subramanian and colleagues\cite{subramanian2005}. The network analysis functionalities make use of the BioNet package\cite{beisser2010} to identify enriched subnetworks. In this vignette, we demonstrate how to perform these analyses on an RNAi screen data set in \emph{cellHTS2} format.

<<Ropts, echo=FALSE, results=hide>>=
options(width=70)
@ 

<<eval=FALSE>>=
library(HTSanalyzeR)
library(GSEABase)
library(cellHTS2)
library(org.Dm.eg.db)
library(GO.db)
library(KEGG.db)
@

\section{Preprocessing cell-based RNAi screen data with \emph{cellHTS2}}


The data set that we use results from a genome-wide RNAi analysis of growth and viability in Drosophila cells \cite{boutros2004}. This data set can be found in the package "cellHTS2"\cite{boutros2006}.  The first steps of this analysis consists in loading the data and building a configured, normalized and annotated cellHTS object that will be used for the networks analysis.  This object is then scored to be used in the gene set over-representation part of this analysis.  Briefly, the data consists in a series of text files, one for each microtiter plate in the experiment, containing intensity reading for a luciferase reporter of ATP levels in each well of the plate.  

The first data processing step is to read the data files and build a cellHTS object from them (performed by the \emph{readPlateList} function).  Then, the object has to be configured, which involves describing the experiment and, more importantly in our case, the plate configuration (i.e. indicating which wells contain samples or controls and which are empty or flagged as invalid). Following configuration, the data can be normalized, which is done in this case by substracting from each raw intensity measurement the median of all sample measurements on the same plate. In order to use the values in this package, we need to associate each measurement with a meaningful identifier, which can be done by the \emph{annotate} function.  In this case, the function will associate with each sample well a flybaseCG identifier, which can be converted subsequently into any identifiers that we might want to use.  There are many ways to perform this tasks, for example using our \emph{drosoAnnotationConvertor} function, using a Bioconductor annotation package or taking advantage of the bioMaRt package functionalities. These normalized and annotated values can now be used for the network analysis part of this vignette. 

For the gene set over-representation part of this vignette, we choose to work on data that has been scored and summarized.  These last processing steps allow us to work with values that have been standardized across samples, resulting in a robust z-score which is indicative of how much the phenotype associated with one condition differs from the bulk. This score effectively quantifies how different a measurement is from the median of all measurements, taking into account the variance (or rather in this case the median absolute deviation) across measurements, therefore reducing the spread of the data. This seems like a sensible measure to be used in gene set over-representation, especially for the GSEA, since it is more readily interpretable and comparable than an absolute phenotype.  Moreover the summarization across replicates produces only one value for each construct tested in the screen, which is what we need for the over-representation analysis.

<<eval=FALSE>>=
experimentName<-"KcViab"
dataPath<-system.file(experimentName, package="cellHTS2")
x<-readPlateList("Platelist.txt", name=experimentName, path=dataPath)
x<-configure(x,descripFile="Description.txt",
			confFile="Plateconf.txt",
			logFile="Screenlog.txt",
			path=dataPath)
xn<-normalizePlates(x,scale="multiplicative",
				log=FALSE, method="median",
				varianceAdjust="none")
xn<-annotate(xn,geneIDFile="GeneIDs_Dm_HFA_1.1.txt",
			path=dataPath)
xsc<-scoreReplicates(xn,sign="-",method="zscore")
xsc<-summarizeReplicates(xsc,summary="mean")
@

For a more detailed description of the preprocessing methods below, please refer to the \emph{cellHTS2} vignette.

\section{Gene set overrepresentation and enrichment analysis} 
\subsection{Preparing inputs}

To perform gene set enrichment analysis, one must first prepare three inputs: 
\begin{enumerate}
\item A named vector of numeric phenotypes. 
\item A vector of hits
\item A list of gene set collections.
\end{enumerate}
First, the phenotypes must be assembled into a vector, annotated (in all of these inputs, the gene identifiers must be supplied as Entrez IDs), and the replicates must be summarized.

<<eval=FALSE>>=
data4enrich<-as.vector(Data(xsc));
names(data4enrich)<-fData(xsc)[,"GeneID"] 
data4enrich<-data4enrich[-which(is.na(names(data4enrich))==TRUE)]
data4enrichentrez<-drosoAnnotationConvertor(geneList=data4enrich,
									   initialIDs="FlybaseCG")
data4enrichentrez<-data4enrichentrez[-which(is.na(data4enrichentrez))]
data4enrichentrez<-duplicateRemover(geneList=data4enrichentrez,method="max")
@

Then we define the hits as targets displaying phenotypes more than 2 standard deviations away from the mean phenotype, i.e. abs(z-score) > 2.

<<eval=FALSE>>=
data.hits<-names(data4enrichentrez)[which(abs(data4enrichentrez)>2)]
@
 
Next, we must define the gene set collections. \emph{HTSanalyzeR} provides facilities which greatly simplify the creation of up-to-date gene set collections. Here, we will test 4 gene set collections: KEGG and all 3 GO gene set collections. To work properly, these gene set collections must be provided as a named list.

For details on downloading and utilizing gene set collections from Molecular Signatures Database\cite{subramanian2005}, please refer to Appendix B.

<<eval=FALSE>>=
Dm.GO.MF<-GOGeneSets(species="Drosophila_melanogaster",ontologies=c("MF"))
Dm.GO.BP<-GOGeneSets(species="Drosophila_melanogaster",ontologies=c("BP"))
Dm.GO.CC<-GOGeneSets(species="Drosophila_melanogaster",ontologies=c("CC"))
kegg.droso<-KeggGeneSets(species="Drosophila_melanogaster");
gsc.list<-list(Dm.GO.MF=Dm.GO.MF,
		    Dm.GO.BP=Dm.GO.BP,
		    Dm.GO.CC=Dm.GO.CC,
		    kegg.droso=kegg.droso)
@

In the case where only one gene set collection is to be tested, it is still essential that this gene set collection be supplied to \emph{geneSetAnalyze} as a named list:

<<eval=FALSE>>=

gsc.solo.list<-list(Dm.GO.MF=Dm.GO.MF)
@

\subsection{Performing analyses}

\emph{geneSetAnalyze} performs hypergeometric tests for overrepresentation of gene sets with the list of hits and also performs gene set enrichment analysis (GSEA), as described by Subramanian and colleagues\cite{subramanian2005}.

<<eval=FALSE>>=
enrichment.analysis2<-analyzeGeneSetCollections(
	ListOfGeneSetCollections=gsc.list,
	GeneList=data4enrichentrez,
	hits=data.hits,
	p.value.cutoff=0.05,
	pAdjustMethod="BH",
	npermutations=1000,
	min.gene.set.size=15,
	exponent=1,
	whichSetIsKEGGIds=4,
	whichSetIsGOIds=c(1,2,3)
	)
@

The output contains data frames displaying the results for hypergeometric testing and GSEA for each gene set collection, as well as data frames showing the combined results of all gene set collections. Additionally, gene sets exhibiting significant p-values for enrichment from both hypergeometric testing and GSEA are displayed in separate tables. Additionally, the output contains dataframes of gene sets exhibiting significant p-values (and significant adjusted p-values) for enrichment from both hypergeometric testing and GSEA.

\section{Network analysis}

As explained above, the data that we use for the network analysis is a configured, normalized and annotated cellHTS object (\emph{xn}). From this object, we extract the normalized data and performs a set of statistical tests for the significance of an observed phenotype, we will then aggregate utliple pvalues and map the obtained p-value to an interaction network downloaded from The BioGRID database, and finally use the BioNet package\emph{beisser2010} to extract subnetworks enriched with nodes associated with a significant phenotype, from the statistical analysis.  In this example, we perform a one sample t-test which tests wether the mean of the observations for each construct is equal to the median of all sample observations under the null hypothesis.  This amounts to testing whether the phenotype associated with a construct is significantly different from the bulk of observations, with the underlying assumption that in a large scale screen (i.e. genome-wide in this case) most constructs are not expected to show a significant effect.  We also perform a two-sample t-test, which tests the null hypothesis that two populations have the same mean, where the two populations are a set of observations for each construct and a set of observations for a control population.  

To perform those tests, it is mandatory that the samples and controls are labelled in the column "controlStatus" of the fData(xn) dataframe as "sample" and a string specified by the "control" argument of the networkAnalysis function, respectively. Other types of tests can be performed, namely a "Mann-Whitney" test (one or two sample non-parametric equivalent of the t-test), or a rank product test.  Both the two samples and the one sample tests are automatically produced, in the case of the t-test and the Mann-Withney test. 

Please be aware that the t-test works under the assumption that the observations are normally distributed and that all of these tests are less reliable when the number of replicates is small.  The user should also keep in mind that the one sample t-test assumes that the majority of conditions are not expected to show any significant effect, which is likely to be a dodgy assumption when the size of the screen is small. This test is also to be avoided when the data consists of pre-screened conditions, i.e. constructs that have been selected specifically based on a potential effect.    

All three kind of tests can be performed with the two sided, less or greater alternative, corresponding to population means (or ranking in the case of the rank product) expected to be different, smaller of larger than the null hypothesis, respectively. For example if your phenotypes consist of cell number and you are looking for constructs that impair cell viability, you might be looking for phenotypes that are smaller than the mean. 

Whatever test you choose to produce, you can still choose which resulting p-values you want to map to the interaction data by specifying the "columns" argument of \emph{networkAnalysis}.  The annotationcolumn argument is used to specify which column of the fData(xn) dataframe contains identifiers for the constructs.  The type of those identifiers can be specified in the "initialIDs" argument, and will be converted to Entrez gene identifiers which can be mapped to the BioGRID interaction data.  The fdr and order are parameters of the statistical analysis performed by the BioNet package (see \cite{beisser2010} for a guide on how to specify those).    If you already have a set of interaction data, you can give it as an argument in to the biogridobject parameter, as long as the format is: a matrix with a row for each interaction, and at least the three columns "InteractorA", "InteractorB" and "InteractionType", where the interactors are specified by Entrez identifiers.  If you set this argument to NA, the function will download a data set from the BioGRID. 

The optional "phenotypevector" argument is a named vector (names=Entrez identifiers) containing phenotypes values that will be used to color the nodes of the resulting enriched subnetwork.

The \emph{networkAnalysis} function produces a set files containing the enriched subnetwork in tab delimited format, and in sif format.  It also produces an image of the enriched subnetwork, with symbol identifiers as labels of the nodes.  An attribute file is also produces, which can be used in Cytoscape for example, and contains the symbol identifier for each Entrez identifier in the enriched subnetwork.  The function also produce on your screen a plot showing the fitting of the BioNet model to your distribution of p values, this is a good plot to look at to check the order parameter and choice of statistics used in this function. 


<<eval=FALSE>>=
library(BioNet)
test.module<-networkAnalysis(
	cellHTSobject=xn,
	annotationColumn="GeneID",
	controls="neg",
	alternative="two.sided",
	logged=FALSE,
	tests=c("T-test"),
	columns=c("t.test.pvalues.two.samples","t.test.pvalues.one.sample"),
	species=c("Drosophila_melanogaster"),
	initialIDs="FlybaseCG",
	fdr=0.001,
	genetic=FALSE,
	biogridObject=NA,phenotypeVector=data4enrichentrez,order=2)	
@

"""""""""""""""""""""""


\section{Producing the HTML report}

The following function produces an html report on the whole analysis performed above.  Most of the parameters of these function can be directly copied and pasted from the parameters of the two wrapping functions \emph{geneSetAnalyze} and \emph{networkAnalysis} (see the help on this function).  The html report will be written in a subdirectory in you working directory called "HTSanalyzeReport".  Start from the index.html page in that directory for an easy navigation through the results of your analysis.

<<eval=FALSE>>=

writeReportHTSA(
	experimentName="cellHTS2DrosoData",
	enrichmentAnalysis=enrichment.analysis,
	cutoffHits=2,
	hits=names(data4enrichentrez)[which(abs(data4enrichentrez)>2)],
	listOfGeneSetCollections=gsc.list,
	geneList=data4enrichentrez,
	p.adj.method="BH",
	nPermutations=1000,
	min.gene.set.size=15,
	exponent=1,
	nwAnalysisOutput=test.module,
	nwAnalysisGraphFile="EnrichedSubNw.png",
	controls="neg",
	alternative="two.sided",
	tests=c("T-test"),
	columns=c("t.test.pvalues.two.samples","t.test.pvalues.one.sample"),
	species=c("Drosophila_melanogaster"),
	fdr=0.001,
	genetic=FALSE,
	networkObject=NA,
	nGseaPlots=10,
	geneListName="data4enrichentrez",
	whichSetIsKEGGIds=4,
	whichSetIsGOIds=c(1,2,3)
	)
@


\section{Appendix A: Using MSigDB gene set collections}

For experiments in human cell lines, it is often useful to test the gene set collections available at the Molecular Signatures Database (MSigDB; http://www.broadinstitute.org/gsea/msigdb/)\cite{subramanian2005}. 

In order to download the gene set collections available through MSigDB, one must first register. After registration, download the desired gmt files into the working directory. Using the getGmt and mapIdentifiers functions from \emph{GSEABase} importing the gene set collection and mapping the annotations to Entrez IDs is relatively. straightforward 

<<eval=FALSE>>=
c2<-getGmt(con="c2.all.v2.5.symbols.gmt.txt",geneIdType=SymbolIdentifier(), collectionType=BroadCollection(category="c2"))
@

Once again, for many of the functions in this package to work properly, all gene identifiers must be supplied as Entrez IDs.
<<eval=FALSE>>=
c2entrez<-mapIdentifiers(C2b,EntrezIdentifier('org.Hs.eg.db'))
@

\section{Appendix B: Using the HTSanalysis4CellHTS2 function}

All of the above steps can be performed with a unique function, starting from a normalized, configured and annotated cellHTS object.

First, we need to create the cellHTS object and the gene set collection list, and load the relevant packages. 

<<eval=FALSE>>=
experimentName<-"KcViab"
dataPath<-system.file(experimentName, package="cellHTS2")
x<-readPlateList("Platelist.txt",name=experimentName,path=dataPath)
x<-configure(x,descripFile="Description.txt",confFile="Plateconf.txt",logFile="Screenlog.txt",path=dataPath)
xn<-normalizePlates(x,scale="multiplicative",log=FALSE,method="median",varianceAdjust="none")
xn<-annotate(xn,geneIDFile="GeneIDs_Dm_HFA_1.1.txt",path=dataPath)
Dm.GO.CC<-GOGeneSets(species="Drosophila_melanogaster",ontologies=c("CC"))
kegg.droso<-KeggGeneSets(species="Drosophila_melanogaster");
gsc.list<-list(Dm.GO.CC=Dm.GO.CC,kegg.droso=kegg.droso)
library(org.Dm.eg.db)
library(GO.db)
library(KEGG.db)
@

Then we simply call the function HTSanalysis4CellHTS2. This will produce a full HTSanalyzeR report, just as if the above steps were performed separately. All the parameters of the enrichment and network analysis steps can be specified as input of this function (see help(HTSanalysis4CellHTS2)).  Since they are given sensible default values, a minimal set of input parameters is actually required.

<<eval=FALSE>>=
cellHTS2DrosoData<-xn
HTSanalysis4CellHTS2(
 	normCellHTSobject=cellHTS2DrosoData,
 	annotationColumn="GeneID",
 	species=c("Drosophila_melanogaster"),
 	initialIDs="FlybaseCG",
 	listOfGeneSetCollections=gsc.list,
 	whichSetIsKEGGIds=2,
 	whichSetIsGOIds=1
	)
@

\section{Appendix C: Creating your own gene set collections}

Our package relies on the class geneSetCollection from the package GSEABase.  Using this class, you can easily create gene set collections from your own data: 

<<eval=FALSE>>=
gs1<-GeneSet(identifiersVector1, setName="subset1")
gs2<-GeneSet(identifiersVector2, setName="subset2")
gsc<-GeneSetCollection(c(gs1,gs2))
@

where the object "identifiersVector" are simply vector containing gene identifiers.

\section{Appendix D: Performing gene set analysis on multiple phenotypes}

When performing hight throughput screens in cell culture-based assays, it is more and more common that multiple phenotypes would be recorded for each condition (such as e.g. number of cells and intensity of a reporter).  In these cases, you can perform the enrichment analysis separately on the different lists of phenotypes and try to find gene sets enriched in all of them.  In such cases, our package comprises a function called "aggregatePvals" that allows you to aggregate p values obtained for the same gene set from an enrichment analysis on different phenotypes.  This function simply inputs a matrix of p values with a row for each gene set, and returns aggregated p values, obtained using either the Fisher or Stouffer methods.  The Fisher method combines the p values into an aggregated chi-squared statistic equal to -2.sum(log(Pk)) were we have k=1,..,K  pvalues independently distributed as uniform on the unit interval under the null hypothesis.  The resulting p values is calculated by comparing this chi squared statistic to a chi squared distribution with 2K degrees of freedom. The Stouffer method computes a z statistic assuming that the sum of the quantiles (from a standard normal distribution) corresponding to the p values are distributed as N(0,K).

However, it is possible that the phenotypes that are measured are expected to show opposite behaviors (e.g. when measuring the number of cells and a reporter for apoptosis).  In these cases, we provide two methods to detect gene sets that are associated with opposite patterns of a pair of phenotypic responses.  The first method (implemented in the functions "pairwiseGsea" and "pairwiseGseaPlot") is a modification of the GSEA method by \cite{subramanian2005}.  Briefly, the enrichment scores are computed separately on both phenotype lists, and the absolute value of the difference between the two enrichment scores is compared to permutation-based scores obtained by computing the difference in enrichment score between the two lists when the gene labels are randomly shuffled.  This method can only be applied if both phenotypes are measured on the same set of conditions (i.e. the gene labels are the same in both lists, although their associated phenotypes might be very different).  

The second method, implemented in the function "pairwisePhenoMannWith", performs a Mann-Whitney test for shift in location of genes from gene sets, on a pair of phenotypes.  The Mann-Whitney test is a non-parametrical equivalent to a two samples t-test (equivalent to a Wilcoxon rank sum test). It looks for gene sets that are whose phenotype distribution is located around two different values in the two phenotypes list, rather than spread on the whole list in both lists.  Please be aware that this test should be applied on phenotypes that are on the same scale.  If you compare a number of cells (e.g. thousands of cells) to a percentage of cells expressing a marker for example, you will always find a difference in the means of the two populations of phenotypes, whatever the genes in those populations. However, it is very common in high throughput experiments that some sort of internal control is available (e.g. phenotype of the wild type cell line, with no RNAi). A simple way to obtain the different phenotypes on similar scales is therefore to use as phenotypes the raw measurements divided by their internal control counterpart.  

\begin{thebibliography}{1}

\bibitem{beisser2010}
D.~Beisser, G.W. Klau, T.~Dandekar, T.~Mueller, and M.~Dittrich.
\newblock Bionet: an r-package for the functional analysis of biological
  networks.
\newblock {\em Bioinformatics}, 2010.

\bibitem{boutros2006}
M.~Boutros, L.~Br{\'a}s, and W.~Huber.
\newblock Analysis of cell-based rnai screens.
\newblock {\em Genome Biology}, 7(7):R66, 2006.

\bibitem{boutros2004}
M.~Boutros, A.A. Kiger, S.~Armknecht, K.~Kerr, M.~Hild, B.~Koch, S.A. Haas,
  et~al.
\newblock Genome-wide rnai analysis of growth and viability in drosophila
  cells.
\newblock {\em Science}, 303(5659):832, 2004.

\bibitem{subramanian2005}
A.~Subramanian, P.~Tamayo, V.K. Mootha, S.~Mukherjee, B.L. Ebert, M.A.
  Gillette, A.~Paulovich, S.L. Pomeroy, T.R. Golub, E.S. Lander, et~al.
\newblock Gene set enrichment analysis: a knowledge-based approach for
  interpreting genome-wide expression profiles.
\newblock {\em Proceedings of the National Academy of Sciences}, 102(43):15545,
  2005.

\end{thebibliography}

\end{document}